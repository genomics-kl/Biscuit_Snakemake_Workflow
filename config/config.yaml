# Reference genome
#     fasta: absolute path to reference FASTA file
#     index: does not need to be different from "fasta", but might be useful if 2-bit packed reference doesn't have .fa extension or is named differently
#     assets: prebuilt assets and scripts to build custom assets can be found at https://github.com/huishenlab/biscuit/releases/
ref:
    fasta: /varidata/research/projects/bbc/research/SZAP_20220912_invivoZBTB43_VBCS-810/wgbs/biscuit_index/mm10_gencode.fa 
    index:  /varidata/research/projects/bbc/research/SZAP_20220912_invivoZBTB43_VBCS-810/wgbs/biscuit_index/mm10_gencode.fa
    assets: /varidata/research/projects/bbc/research/SZAP_20220912_invivoZBTB43_VBCS-810/wgbs/mm10/

# Directory where raw FASTQs live, can be absolute path or path relative to Snakefile
fastqs: raw_data

# Samplesheet for specifying sample names and corresponding FASTQ files, can be absolute path or path relative to Snakefile
samples: config/samples.tsv

# Directory for writing analysis/ directory to (if '', write to same directory as Snakefile)
output_directory: ''

# Create BISCUITqc assets, CpG seascape (islands, shores, shelves, and open seas), and genomic feature BED files
#     run: run if True (output will be in a directory called assets/), skip if False
#     genome: genome to create files for (possible choices: 'hg38', 'hg19', 'mm10', 'mm9')
# While the BISCUITqc asset files are readily availabe on GitHub, the seascape and genomic features need to be generated
# from various annotation files from UCSC and GENCODE. You are welcome to create these yourself (using the naming scheme
# seen in workflow/rules/create_assets.smk) and point to them in obs_exp['assets']
create_assets:
    run: False
    genome: 'mm10'

# Turn on/off read trimming, handle additional trim_galore options
#     trim_before_BISCUIT: run trimming (set as True) or not (set as False)
#     args_list: additonal arguments to pass to trim_galore (note --paired, --fastqc, --cores, and --output_dir are always included), '' will not include any extra arguments
#         Note, when processing data generated with the Adaptase module, it is highly suggested to set args_list: '--clip_R2 15'
trim_galore:
    trim_before_BISCUIT: False
    args_list: '--clip_R2 15'

# BISCUIT alignment options
#     biscuit_blaster_version: version of biscuitBlaster to run (specify either v1 or v2)
#     lib_type: biscuit align -b option (for directional vs non-directional alignment)
biscuit:
    biscuit_blaster_version: v1
    lib_type: 0

# Input data is from NOMe-seq
# If True - data is NOMe-seq data
# If False - data is WGBS or EM-seq
is_nome: False

# Inputs to SAM read group in biscuit align
#     PL: platform/technology entry
#     PU: platform unit entry
#     LB: library preparation entry
sam_header:
    PL: il
    PU: nv
    LB: b1

# Call SNPs with BISCUIT (True) or not (False)?
generate_snps: False

# Create epiBED files (True) or not (False)? Sets generate_snps to True if epiread is True
epiread: False

# Create a joint reference with ref['fasta'], lambda phage, and pUC19 genomes (lambda phage and pUC19 genomes proved in bin/)
# Lambda phage and pUC19 control vectors are only included in Illumina's NEBNextÂ® Enzymatic Methyl-seq Kit
# If True - create a joint reference and use this as reference during alignment and further processing
# If False - ref['fasta'] will be used as expected
build_ref_with_methylation_controls: False

# Calculate lambda phage and pUC19 methylation levels and create summary plot (output as <output_directory>/analysis/qc_vectors/control_vector_boxplot.pdf)
# Only useful if the ref genome included the control vectors with fasta headers >J02459.1 (lamdba / unmethylated control) and >M77789.2 (puc19 / methylated control). 
# The ref genome can be modified automatically to include these control vectors as the first two contigs by setting config["build_ref_with_methylation_controls"].
# If True - calculate methylation and create plot
# If False - skip this step
control_vectors: False

# Run fastq_screen on data
# If True - run fastq_screen with --bisulfite mode (uses Bismark)
# If False - skip this step
run_fastq_screen: True

# fastq_screen configure file path passed to --conf in fastq_screen
fastq_screen_conf: /primary/projects/bbc/references/fastq_screen/downloaded_20200309/FastQ_Screen_Genomes_Bisulfite/fastq_screen.conf

# Run preseq on data
# If True - run preseq
# If False - skip this step
# preseq_options - other options to include in preseq c_curve (output file, paired end, and BAM input options already included)
preseq: False
preseq_options: ''

# Calculate the ratio observed/expected coverage based on bismap results for different genomic features
# run - create obs/exp plots if True, skip if False
# assets - directory where asset files live (set create_assets['run'] to True if you don't have these files already)
obs_exp:
    run: False
    assets: assets/hg38

# Find some CpG statistics not found elsewhere (% covered, CpG island coverage)
# run - create CpG stats plots if True, skip if False
# assets - directory where asset files live (set create_assets['run'] to True if you don't have these files already)
cpg_stats:
    run: False
    assets: assets/hg38

# Determine uniformity of coverage across genome
# run - uniformity plots if True, skip if False
# assets - directory where asset files live (set create_assets['run'] to True if you don't have these files already)
covg_uniformity:
    run: False
    assets: assets/hg38


biscuiteer:
    genome: "mm10" # for 'genome' param in biscuiteer::readBiscuit()

# Environment modules paths used in "module load <string>" (pending you have a module system available)
# If your system does not use environmental modules, then executables for all of the modules must be in your PATH and
# each tool should be set to NULL (as shown below).
# If all dependency executables are in PATH and the module is specified with NULL, the workflow will still run with
# warnings that modules could not be loaded.
envmodules: 
    samtools: bbc/samtools/samtools-1.12
    R: bbc/R/R-4.1.0
    biscuiteer: bbc/R/alt/R-4.2.1-setR_LIBS_USER
    snakemake: bbc/snakemake/snakemake-6.1.0
    trim_galore: bbc/trim_galore/trim_galore-0.6.0
    biscuit: bbc/biscuit/biscuit_1_0_1
    samblaster: bbc/samblaster/samblaster-0.1.26
    preseq: bbc/preseq/preseq-3.1.2
    htslib: bbc/htslib/htslib-1.12
    bedtools: bbc/bedtools/bedtools-2.29.2
    fastqc: bbc/fastqc/fastqc-0.11.9
    multiqc: bbc/multiqc/multiqc-1.11
    parallel: bbc/parallel/parallel-20191122
    pigz: bbc/pigz/pigz-2.4
    fastq_screen: bbc/fastq_screen/fastq_screen-0.14.0
    bismark: bbc/bismark/bismark-0.23.0
    python3: bbc/python3/python-3.8.1
    # if you e.g. don't have a module system then put the envmodules as follows:
    #~ samtools: "NULL"
    #~ R: "NULL"
    #~ snakemake: "NULL"
    #~ trim_galore: "NULL"
    #~ biscuit: "NULL"
    #~ samblaster: "NULL"
    #~ preseq: "NULL"
    #~ htslib: "NULL"
    #~ bedtools: "NULL"
    #~ fastqc: "NULL"
    #~ multiqc: "NULL"
    #~ parallel: "NULL"
    #~ pigz: "NULL"
    #~ fastq_screen: "NULL"
    #~ bismark: "NULL"
    #~ python3: "NULL"

# Memory and Thread parameters used when running on a cluster
#     maxThreads: number of threads to run biscuit align with
#     maxMemoryGb: high amount of memory to request
#     intermediateMemoryGb: middle amount of memory to request
#     smallMemoryGb: low amount of memory to request
#     trimThreads: number of threads to run trim_galore with
#     pileupThreads: number of threads to run biscuit pileup with
hpcParameters:
    maxThreads: 28
    biscuitBlasterThreads: 20
    samtoolsIndexThreads: 8
    maxMemoryGb: 245
    intermediateMemoryGb: 80
    smallMemoryGb: 20
    trimThreads: 8
    pileupThreads: 8

# Time to request when running on a cluster, names should be pretty self explanatory...
walltime:
    short: 1:00:00
    medium: 24:00:00
    long: 200:00:00


# Create binned average methylation values using bin/find_binned_averages.sh
binned_averages:
   run: True #False
   covFilter: 1
   bin_sizes: [10000, 100000, 1000000] # one bin_sizes will also work, but needs to be a python list!
   #~ bin_sizes: [1000000] # one bin_sizes will also work, but needs to be a python list!
   
# Turn on/off region_centered_bin_averages
#     run: run rules involved with this
#     region_file: BED file with regions to build bins around
#     args_list: additonal arguments to pass to scripts/region_centered_bin_averages.py
region_centered_bin_averages:
    run: False
    region_file: /path/to/a/region/file/for/which/you/want/centered/bins.bed
    args_list: '-f 5 -m 200 -n 1 -s 4 --middle --collapse'
